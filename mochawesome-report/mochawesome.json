{
  "stats": {
    "suites": 13,
    "tests": 30,
    "passes": 30,
    "pending": 0,
    "failures": 0,
    "start": "2021-06-01T09:32:33.353Z",
    "end": "2021-06-01T09:32:34.355Z",
    "duration": 1002,
    "testsRegistered": 30,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "317476f5-0fcb-445c-b62e-5b3dc9d1d757",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2a28c96a-d5bb-4c6d-b39d-c984a047774e",
          "title": "Users APIs",
          "fullFile": "/home/alireza/jsonplaceholde-test-automation/test/app.js",
          "file": "/test/app.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ba90505c-809e-407f-af48-0964c9ae96ce",
              "title": "Search Delphine username /users",
              "fullFile": "/home/alireza/jsonplaceholde-test-automation/test/app.js",
              "file": "/test/app.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It should return all delphines'details ",
                  "fullTitle": "Users APIs Search Delphine username /users It should return all delphines'details ",
                  "timedOut": false,
                  "duration": 78,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user_name  = \"Delphine\";\nchai.request(server)\n    .get(\"/users?username=\"+user_name)\n    .end((_err,response) => {\n        response.should.have.status(200);\n        response.body.should.be.a('array').to.be.not.null;\n        response.body[0].should.have.property(\"id\").to.be.not.null;\n        response.body[0].should.have.property(\"name\").to.be.not.null;\n        response.body[0].should.have.property(\"username\").to.be.not.null;\n        response.body[0].should.have.property(\"email\").to.be.not.null;\n        response.body[0].should.have.property(\"address\").to.be.not.null;\n        response.body[0].address.should.have.property(\"street\").to.be.not.null;\n        response.body[0].address.should.have.property(\"suite\").to.be.not.null;\n        response.body[0].address.should.have.property(\"city\").to.be.not.null;\n        response.body[0].address.should.have.property(\"zipcode\").to.be.not.null;\n        response.body[0].address.should.have.property(\"geo\").to.be.not.null;\n        response.body[0].address.geo.should.have.property(\"lat\").to.be.not.null;\n        response.body[0].address.geo.should.have.property(\"lng\").to.be.not.null;\n        response.body[0].should.have.property(\"phone\").to.be.not.null;\n        response.body[0].should.have.property(\"website\").to.be.not.null;\n        response.body[0].should.have.property(\"company\").to.be.not.null;\n        response.body[0].should.have.property(\"company\").to.be.not.null;\n        response.body[0].company.should.have.property(\"name\").to.be.not.null;\n        response.body[0].company.should.have.property(\"catchPhrase\").to.be.not.null;\n        response.body[0].company.should.have.property(\"bs\").to.be.not.null;\n        expect(response.body[0].id).to.be.eql(9);\n        expect(response.body[0].username).to.be.eql(\"Delphine\")\n    done();    \n    });",
                  "err": {},
                  "uuid": "bba1f8ff-98f4-46af-b240-09f5c84ada2d",
                  "parentUUID": "ba90505c-809e-407f-af48-0964c9ae96ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bba1f8ff-98f4-46af-b240-09f5c84ada2d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 78,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3eb62aa7-c4df-4317-add5-cbf960233b50",
          "title": "Posts APIs",
          "fullFile": "/home/alireza/jsonplaceholde-test-automation/test/app.js",
          "file": "/test/app.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6997ffa0-d690-4941-b296-951869945ac5",
              "title": " Details fetched /posts",
              "fullFile": "/home/alireza/jsonplaceholde-test-automation/test/app.js",
              "file": "/test/app.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It should return all the posts written by the user ",
                  "fullTitle": "Posts APIs  Details fetched /posts It should return all the posts written by the user ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const user_id  = 9;\nchai.request(server)\n    .get(\"/posts?userId=\"+user_id)\n    .end((_err,response) => {\n        response.should.have.status(200);\n        response.body.should.be.a('array');\n        response.body[0,1,2,3,4,5,6,7,8,9].should.have.property(\"userId\").to.be.not.null\n        response.body[0,1,2,3,4,5,6,7,8,9].should.have.property(\"id\").to.be.not.null\n        response.body[0,1,2,3,4,5,6,7,8,9].should.have.property(\"title\").to.be.not.null\n        response.body[0,1,2,3,4,5,6,7,8,9].should.have.property(\"body\").to.be.not.null\n        response.body[0,1,2,3,4,5,6,7,8,9].should.have.property(\"userId\").eql(user_id);\n    done();\n    });",
                  "err": {},
                  "uuid": "69c338f8-a82c-41e1-8e44-5f376573b10c",
                  "parentUUID": "6997ffa0-d690-4941-b296-951869945ac5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69c338f8-a82c-41e1-8e44-5f376573b10c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 43,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "79985616-2d6b-4af0-b543-991e01538e7f",
          "title": "Comments APIs",
          "fullFile": "/home/alireza/jsonplaceholde-test-automation/test/app.js",
          "file": "/test/app.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "It should return all the Comments written by the users ",
              "fullTitle": "Comments APIs It should return all the Comments written by the users ",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(server)\n    .get(\"/comments\")\n    .end((_err,response) => {\n        response.should.have.status(200);\n        response.body.should.be.a('array');\n    done();\n    });",
              "err": {},
              "uuid": "438073c1-64ea-4e2e-81e6-bc0852fbc703",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return all the Comments written by the postId 81 ",
              "fullTitle": "Comments APIs It should return all the Comments written by the postId 81 ",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 81;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {  \n        response.should.have.status(200);\n        response.body.should.be.a('array');\n        response.body[0,1,2,3].should.have.property(\"postId\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"id\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"name\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"email\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"body\").to.be.not.null\n        expect(response.body[0,1,2,3].postId).to.be.eql(post_id);\n    done();\n});",
              "err": {},
              "uuid": "c8c4116c-be98-46da-899c-96a741a0a54a",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Email validation for postId 81 ",
              "fullTitle": "Comments APIs Email validation for postId 81 ",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 81;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        const checkmail = ValidateEmail(response.body[0,1,2,3].email);\n        expect(checkmail).to.be.eql(true);\n    done();    \n    }) ;",
              "err": {},
              "uuid": "fe86ccd3-2e40-4999-b3b9-f750b05ade9e",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return all the Comments written by the postId 82 ",
              "fullTitle": "Comments APIs It should return all the Comments written by the postId 82 ",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 82;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        response.should.have.status(200);\n        response.body.should.be.a('array');\n        response.body[0,1,2,3].should.have.property(\"postId\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"id\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"name\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"email\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"body\").to.be.not.null\n        expect(response.body[0,1,2,3].postId).to.be.eql(post_id);\n    done();\n}) ;",
              "err": {},
              "uuid": "bbfc20ab-f57f-4031-aefa-7c421acd5f43",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Email validation for postId 82 ",
              "fullTitle": "Comments APIs Email validation for postId 82 ",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 82;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        const checkmail = ValidateEmail(response.body[0,1,2,3].email);\n        expect(checkmail).to.be.eql(true);\n    done();\n });",
              "err": {},
              "uuid": "d1ed144f-bbca-4635-8540-df754bc43db6",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return all the Comments written by the postId 83 ",
              "fullTitle": "Comments APIs It should return all the Comments written by the postId 83 ",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 83;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        response.should.have.status(200);\n        response.body.should.be.a('array');\n        response.body[0,1,2,3].should.have.property(\"postId\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"id\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"name\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"email\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"body\").to.be.not.null\n        expect(response.body[0,1,2,3].postId).to.be.eql(post_id);\n    done();    \n});",
              "err": {},
              "uuid": "3a6178f5-1a7c-4115-953c-5d97dfb361ca",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Email validation for postId 83 ",
              "fullTitle": "Comments APIs Email validation for postId 83 ",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 83;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        const checkmail = ValidateEmail(response.body[0,1,2,3].email);\n        expect(checkmail).to.be.eql(true);\n    done();\n });",
              "err": {},
              "uuid": "604bad31-3973-487b-a8ce-21408e048b55",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return all the Comments written by the postId 84 ",
              "fullTitle": "Comments APIs It should return all the Comments written by the postId 84 ",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 84;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        response.should.have.status(200);\n        response.body.should.be.a('array');\n        response.body[0,1,2,3].should.have.property(\"postId\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"id\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"name\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"email\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"body\").to.be.not.null\n        expect(response.body[0,1,2,3].postId).to.be.eql(post_id);\n    done();   \n});",
              "err": {},
              "uuid": "59252435-e28a-47f6-9864-3387b6064f4c",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Email validation for postId 84 ",
              "fullTitle": "Comments APIs Email validation for postId 84 ",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 84;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        const checkmail = ValidateEmail(response.body[0,1,2,3].email);\n        expect(checkmail).to.be.eql(true);\n    done();\n });",
              "err": {},
              "uuid": "aae56108-8693-4170-a718-3c73f73d1ac3",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return all the Comments written by the postId 85 ",
              "fullTitle": "Comments APIs It should return all the Comments written by the postId 85 ",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 85;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        response.should.have.status(200);\n        response.body.should.be.a('array');\n        response.body[0,1,2,3].should.have.property(\"postId\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"id\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"name\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"email\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"body\").to.be.not.null\n        expect(response.body[0,1,2,3].postId).to.be.eql(post_id);\n    done();   \n});",
              "err": {},
              "uuid": "d6a44ccd-1adf-426d-996b-f10b7741bd3c",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Email validation for postId 85 ",
              "fullTitle": "Comments APIs Email validation for postId 85 ",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 85;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        const checkmail = ValidateEmail(response.body[0,1,2,3].email);\n        expect(checkmail).to.be.eql(true);\n    done();\n });",
              "err": {},
              "uuid": "8f4829b2-1e29-4544-aebb-b83bd2910758",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return all the Comments written by the postId 86 ",
              "fullTitle": "Comments APIs It should return all the Comments written by the postId 86 ",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 86;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        response.should.have.status(200);\n        response.body.should.be.a('array');\n        response.body[0,1,2,3].should.have.property(\"postId\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"id\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"name\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"email\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"body\").to.be.not.null\n        expect(response.body[0,1,2,3].postId).to.be.eql(post_id);\n    done();   \n});",
              "err": {},
              "uuid": "4f6600c6-2619-466c-8490-f71eb24dc59a",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Email validation for postId 86 ",
              "fullTitle": "Comments APIs Email validation for postId 86 ",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 86;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        const checkmail = ValidateEmail(response.body[0,1,2,3].email);\n        expect(checkmail).to.be.eql(true);\n    done();\n });",
              "err": {},
              "uuid": "fa7c0099-fb34-4e8e-a907-3aa693b3beb6",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return all the Comments written by the postId 87 ",
              "fullTitle": "Comments APIs It should return all the Comments written by the postId 87 ",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 87;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        response.should.have.status(200);\n        response.body.should.be.a('array');\n        response.body[0,1,2,3].should.have.property(\"postId\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"id\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"name\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"email\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"body\").to.be.not.null\n        expect(response.body[0,1,2,3].postId).to.be.eql(post_id);\n    done();   \n});",
              "err": {},
              "uuid": "9087cd3a-f7cb-47f6-a91c-5295da322114",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Email validation for postId 87 ",
              "fullTitle": "Comments APIs Email validation for postId 87 ",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 87;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        const checkmail = ValidateEmail(response.body[0,1,2,3].email);\n        expect(checkmail).to.be.eql(true);\n    done();\n });",
              "err": {},
              "uuid": "6fa5b744-3771-4231-8374-b6122c78a0fc",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return all the Comments written by the postId 88 ",
              "fullTitle": "Comments APIs It should return all the Comments written by the postId 88 ",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 88;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        response.should.have.status(200);\n        response.body.should.be.a('array');\n        response.body[0,1,2,3].should.have.property(\"postId\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"id\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"name\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"email\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"body\").to.be.not.null\n        expect(response.body[0,1,2,3].postId).to.be.eql(post_id);\n    done();   \n});",
              "err": {},
              "uuid": "53c11662-6ac7-4ec9-92c3-472c92e085f7",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Email validation for postId 88 ",
              "fullTitle": "Comments APIs Email validation for postId 88 ",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 88;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        const checkmail = ValidateEmail(response.body[0,1,2,3].email);\n        expect(checkmail).to.be.eql(true);\n    done();\n });",
              "err": {},
              "uuid": "7f829e80-b85d-4505-9530-a8efd6e10780",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return all the Comments written by the postId 89 ",
              "fullTitle": "Comments APIs It should return all the Comments written by the postId 89 ",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 89;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        response.should.have.status(200);\n        response.body.should.be.a('array');\n        response.body[0,1,2,3].should.have.property(\"postId\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"id\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"name\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"email\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"body\").to.be.not.null\n        expect(response.body[0,1,2,3].postId).to.be.eql(post_id);\n    done();   \n});",
              "err": {},
              "uuid": "73cbbe56-d0e1-45b4-b1a3-988f1222383c",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Email validation for postId 89 ",
              "fullTitle": "Comments APIs Email validation for postId 89 ",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 89;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        const checkmail = ValidateEmail(response.body[0,1,2,3].email);\n        expect(checkmail).to.be.eql(true);\n    done();\n });",
              "err": {},
              "uuid": "18adde5c-9762-459e-b111-c50558d4521f",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "It should return all the Comments written by the postId 90 ",
              "fullTitle": "Comments APIs It should return all the Comments written by the postId 90 ",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 90;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        response.should.have.status(200);\n        response.body.should.be.a('array');\n        response.body[0,1,2,3].should.have.property(\"postId\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"id\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"name\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"email\").to.be.not.null\n        response.body[0,1,2,3].should.have.property(\"body\").to.be.not.null\n        expect(response.body[0,1,2,3].postId).to.be.eql(post_id);\n    done();   \n});",
              "err": {},
              "uuid": "d8aa8835-9220-43e4-9c04-f13f4972872e",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Email validation for postId 90 ",
              "fullTitle": "Comments APIs Email validation for postId 90 ",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const post_id = 90;\nchai.request(server)\n    .get(\"/comments?postId=\"+post_id)\n    .end((_err,response) => {\n        const checkmail = ValidateEmail(response.body[0,1,2,3].email);\n        expect(checkmail).to.be.eql(true);\n    done();\n });",
              "err": {},
              "uuid": "4a5d1775-eef5-4260-aa97-da939668f3be",
              "parentUUID": "79985616-2d6b-4af0-b543-991e01538e7f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "438073c1-64ea-4e2e-81e6-bc0852fbc703",
            "c8c4116c-be98-46da-899c-96a741a0a54a",
            "fe86ccd3-2e40-4999-b3b9-f750b05ade9e",
            "bbfc20ab-f57f-4031-aefa-7c421acd5f43",
            "d1ed144f-bbca-4635-8540-df754bc43db6",
            "3a6178f5-1a7c-4115-953c-5d97dfb361ca",
            "604bad31-3973-487b-a8ce-21408e048b55",
            "59252435-e28a-47f6-9864-3387b6064f4c",
            "aae56108-8693-4170-a718-3c73f73d1ac3",
            "d6a44ccd-1adf-426d-996b-f10b7741bd3c",
            "8f4829b2-1e29-4544-aebb-b83bd2910758",
            "4f6600c6-2619-466c-8490-f71eb24dc59a",
            "fa7c0099-fb34-4e8e-a907-3aa693b3beb6",
            "9087cd3a-f7cb-47f6-a91c-5295da322114",
            "6fa5b744-3771-4231-8374-b6122c78a0fc",
            "53c11662-6ac7-4ec9-92c3-472c92e085f7",
            "7f829e80-b85d-4505-9530-a8efd6e10780",
            "73cbbe56-d0e1-45b4-b1a3-988f1222383c",
            "18adde5c-9762-459e-b111-c50558d4521f",
            "d8aa8835-9220-43e4-9c04-f13f4972872e",
            "4a5d1775-eef5-4260-aa97-da939668f3be"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 682,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ea087502-3c7c-40ed-b350-d097c98eaa75",
          "title": "Users APIs",
          "fullFile": "/home/alireza/jsonplaceholde-test-automation/test/app.js",
          "file": "/test/app.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "daaf278e-a978-44a9-b26a-180172d38f7e",
              "title": " Search  username /Users",
              "fullFile": "/home/alireza/jsonplaceholde-test-automation/test/app.js",
              "file": "/test/app.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Search  username written by the invalid path url ",
                  "fullTitle": "Users APIs  Search  username /Users Search  username written by the invalid path url ",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n     //Invalid path url = \"/userss\"\n    .get(\"/userss\")\n    .end((_err,response) => {\n        response.should.have.status(404)\n    done();\n});",
                  "err": {},
                  "uuid": "7c6eeef4-2ed5-4d4f-aa34-f8dbdb0d0154",
                  "parentUUID": "daaf278e-a978-44a9-b26a-180172d38f7e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search  username written by the invalid username ",
                  "fullTitle": "Users APIs  Search  username /Users Search  username written by the invalid username ",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidUsername = \"Test\";\nchai.request(server)\n    .get(\"/users?username=\"+invalidUsername)\n    .end((_err,response) => {\n    response.should.have.status(200);\n    response.body.should.be.a('array').eql([]);\ndone();\n          });",
                  "err": {},
                  "uuid": "b38ce881-1d93-40d9-9973-b2a8e80c23c7",
                  "parentUUID": "daaf278e-a978-44a9-b26a-180172d38f7e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c6eeef4-2ed5-4d4f-aa34-f8dbdb0d0154",
                "b38ce881-1d93-40d9-9973-b2a8e80c23c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 51,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fa576fb5-11de-461d-90af-152988233a66",
          "title": "Posts APIs",
          "fullFile": "/home/alireza/jsonplaceholde-test-automation/test/app.js",
          "file": "/test/app.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dc6974c9-4fd2-4a90-872e-cb9484d4ff70",
              "title": " Details fetched /posts",
              "fullFile": "/home/alireza/jsonplaceholde-test-automation/test/app.js",
              "file": "/test/app.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Search postid  by the invalid path url",
                  "fullTitle": "Posts APIs  Details fetched /posts Search postid  by the invalid path url",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n     //Invalid path url = \"/postss\"\n    .get(\"/postss\")\n    .end((_err,response) => {\n    response.should.have.status(404)\ndone();\n            });",
                  "err": {},
                  "uuid": "3ac85cbd-9027-4c66-87de-a0939440ee35",
                  "parentUUID": "dc6974c9-4fd2-4a90-872e-cb9484d4ff70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search  postid by the invalid postId ",
                  "fullTitle": "Posts APIs  Details fetched /posts Search  postid by the invalid postId ",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidpostId = \"Test\";\nchai.request(server)\n    .get(\"/users?username=\"+invalidpostId)\n    .end((_err,response) => {\n    response.should.have.status(200);\n    response.body.should.be.a('array').eql([]);\ndone();\n          });",
                  "err": {},
                  "uuid": "ea508829-7a56-4de6-b1eb-793f4a39dfed",
                  "parentUUID": "dc6974c9-4fd2-4a90-872e-cb9484d4ff70",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3ac85cbd-9027-4c66-87de-a0939440ee35",
                "ea508829-7a56-4de6-b1eb-793f4a39dfed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 58,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5bec1b6e-18fe-4bbc-bd1c-33d75129c06d",
          "title": "Comments APIs",
          "fullFile": "/home/alireza/jsonplaceholde-test-automation/test/app.js",
          "file": "/test/app.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c2bfbafc-128b-4867-8396-ca660cd647ec",
              "title": " Details fetched /comments",
              "fullFile": "/home/alireza/jsonplaceholde-test-automation/test/app.js",
              "file": "/test/app.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Search comments  by the invalid path url",
                  "fullTitle": "Comments APIs  Details fetched /comments Search comments  by the invalid path url",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n     //Invalid path url = \"/commentss\"\n    .get(\"/commentss\")\n    .end((_err,response) => {\n    response.should.have.status(404)\ndone();\n            });",
                  "err": {},
                  "uuid": "f316c2c1-86ca-433e-9be5-04f83bad08d3",
                  "parentUUID": "c2bfbafc-128b-4867-8396-ca660cd647ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Search  comments by the invalid postId ",
                  "fullTitle": "Comments APIs  Details fetched /comments Search  comments by the invalid postId ",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidpostId = \"Test\";\nchai.request(server)\n    .get(\"/comments?postId=\"+invalidpostId)\n    .end((_err,response) => {\n    response.should.have.status(200);\n    response.body.should.be.a('array').eql([]);\ndone();\n            });",
                  "err": {},
                  "uuid": "372c9442-143b-4f60-9e7e-3d1d9b37bccc",
                  "parentUUID": "c2bfbafc-128b-4867-8396-ca660cd647ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f316c2c1-86ca-433e-9be5-04f83bad08d3",
                "372c9442-143b-4f60-9e7e-3d1d9b37bccc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 55,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b1c98631-7d6c-44a4-9f80-25c1ec911d44",
          "title": " jsonplaceholder APIs",
          "fullFile": "/home/alireza/jsonplaceholde-test-automation/test/app.js",
          "file": "/test/app.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8ea9df40-a881-44e5-90c9-b7ea52597278",
              "title": " General services /",
              "fullFile": "/home/alireza/jsonplaceholde-test-automation/test/app.js",
              "file": "/test/app.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "If req.path === '/' ",
                  "fullTitle": " jsonplaceholder APIs  General services / If req.path === '/' ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .get('/')\n    .end((_err,response) => {\n    response.should.have.status(200);\n    response.body.should.be.not.a('array')\ndone();           \n            });",
                  "err": {},
                  "uuid": "4335ebfd-0835-4de2-bb94-f2332603fcd6",
                  "parentUUID": "8ea9df40-a881-44e5-90c9-b7ea52597278",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4335ebfd-0835-4de2-bb94-f2332603fcd6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}